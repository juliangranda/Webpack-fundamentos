------configuracion de webpack.config.js

El archivo de configuración nos va ayudar a poder establecer la configuración y elementos que vamos a utilizar
Para poder crear el archivo de configuración en la raíz del proyecto creamos un archivo llamado webpack.config.js
En el mismo debemos decir
El punto de entrada
Hacia a donde a enviar la configuración de nuestro proyecto
Las extensiones que vamos usar


-vease el codigo de webpack.config.js

-El flag —config indica donde estará nuestro archivo de configuración
    npx webpack --mode production --config webpack.config.js

-Para poder hacerlo más amigable el comando puedes crear un script en package.json

-se puede ejecutar la configuracion de webpack con:
    -npx webpack --mode production --config webpack.config.js
    -npm run build (script creado)

--------------------------------------------------------------------------------------------------------------------

instalacion de babel

Babel te permite hacer que tu código JavaScript sea compatible con todos los navegadores
Debes agregar a tu proyecto las siguientes dependencias
NPM

npm install -D babel-loader @babel/core @babel/preset-env @babel/plugin-transform-runtime

babel-loader nos permite usar babel con webpack
@babel/core es babel en general
@babel/preset-env trae y te permite usar las ultimas características de JavaScript
@babel/plugin-transform-runtime te permite trabajar con todo el tema de asincronismo como ser async y await
Debes crear el archivo de configuración de babel el cual tiene como nombre .babelrc

cuando lleva el "."babelrc significa que esta va a ser un archivo oculto para que los usuarios no lo vean

{
  "presets": [
    "@babel/preset-env"
  ],
  "plugins": [
    "@babel/plugin-transform-runtime"
  ]
}
Para comenzar a utilizar webpack debemos agregar la siguiente configuración en webpack.config.js
{
...,
module: {
    rules: [
      {
        // Test declara que extensión de archivos aplicara el loader
        test: /\.js$/,
        // Use es un arreglo u objeto donde dices que loader aplicaras
        use: {
          loader: "babel-loader"
        },
        // Exclude permite omitir archivos o carpetas especificas
        exclude: /node_modules/
      }
    ]
  }
}

---------------------------------------------------------------------------------

HTML con webpack

-npm install html-webpack-plugin -D

en el archivo webpack.config.js escribimos:
  -const HtmlWebpackPlugin = require('html-webpack-plugin')        //(esto va al principio)

  //se crea una seccion de plugin despues de modules
  -escribimos siguiente codigo en webpack.config.js:

      plugins: [
        new HtmlWebpackPlugin({ // CONFIGURACIÓN DEL PLUGIN
            inject: true, // INYECTA EL BUNDLE AL TEMPLATE HTML
            template: './public/index.html', // LA RUTA AL TEMPLATE HTML
            filename: './index.html' // NOMBRE FINAL DEL ARCHIVO
        })
    ]

-ejecutamos npm run build o npm run dev segun el modo en el que estemos 

-recordemos que se identifique el cambio en la optimizacion, ademas,
-html se usa con webpack para que esta misma genere un archivo html optimizado en nuestra produccion



----------------------------------------------------------------------------------------------------

CSS con webpack

 -npm i mini-css-extract-plugin css-loader -D

-en el archivo webpack.config.js  
  -añadimos: const MiniCssExtractplugin = require('mini-css-extract-plugin'); //al comienzo
  -creamos una nueva regla: 
          {
            test: /\.css|.styl$/i,
            use:[MiniCssExtractplugin.loader, 
            'css-loader',
            'stylus-loader'
            ],
          }
  -añadimos el plugin:
    - new MiniCssExtractplugin(),

-npm run dev //(notese que se crea el archivo .css en dist)
 //css y webpack con stylus(preprocesador)
npm install stylus stylus-loader -D  

----------------------------------------------------------------------------------------------

copy plugin con webpack
se utiliza para mover archivos, imagenes e incluso una carpeta completa de desarrollo a produccion para no complicarnos tanto,
y a su vez optimizar nuestro codigo en produccion

- npm i copy-webpack-plugin -D
-carpeta webpack.config.js:
    const CopyPlugin = require('copy-webpack-plugin');

    new CopyPlugin({
            patterns: [
              {
                from: path.resolve(__dirname, "src", "assets/images"),
                to: "assets/images"
              }
            ]
          }),

-se organiza la carpeta que se va a mover , en este caso es assets/images
-ejecutamos npm run dev
-verificamos la terminal que se vea que si movio o copio dicha carpeta y que este ok(verde)
-verificamos que veamos la carpeta assets/images en dist