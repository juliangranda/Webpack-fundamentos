------configuracion de webpack.config.js

El archivo de configuración nos va ayudar a poder establecer la configuración y elementos que vamos a utilizar
Para poder crear el archivo de configuración en la raíz del proyecto creamos un archivo llamado webpack.config.js
En el mismo debemos decir
El punto de entrada
Hacia a donde a enviar la configuración de nuestro proyecto
Las extensiones que vamos usar


-vease el codigo de webpack.config.js

-El flag —config indica donde estará nuestro archivo de configuración
    npx webpack --mode production --config webpack.config.js

-Para poder hacerlo más amigable el comando puedes crear un script en package.json

-se puede ejecutar la configuracion de webpack con:
    -npx webpack --mode production --config webpack.config.js
    -npm run build (script creado)

--------------------------------------------------------------------------------------------------------------------

instalacion de babel

Babel te permite hacer que tu código JavaScript sea compatible con todos los navegadores
Debes agregar a tu proyecto las siguientes dependencias
NPM

npm install -D babel-loader @babel/core @babel/preset-env @babel/plugin-transform-runtime

babel-loader nos permite usar babel con webpack
@babel/core es babel en general
@babel/preset-env trae y te permite usar las ultimas características de JavaScript
@babel/plugin-transform-runtime te permite trabajar con todo el tema de asincronismo como ser async y await
Debes crear el archivo de configuración de babel el cual tiene como nombre .babelrc

cuando lleva el "."babelrc significa que esta va a ser un archivo oculto para que los usuarios no lo vean

{
  "presets": [
    "@babel/preset-env"
  ],
  "plugins": [
    "@babel/plugin-transform-runtime"
  ]
}
Para comenzar a utilizar webpack debemos agregar la siguiente configuración en webpack.config.js
{
...,
module: {
    rules: [
      {
        // Test declara que extensión de archivos aplicara el loader
        test: /\.js$/,
        // Use es un arreglo u objeto donde dices que loader aplicaras
        use: {
          loader: "babel-loader"
        },
        // Exclude permite omitir archivos o carpetas especificas
        exclude: /node_modules/
      }
    ]
  }
}

---------------------------------------------------------------------------------

HTML con webpack

-npm install html-webpack-plugin -D

en el archivo webpack.config.js escribimos:
  -const HtmlWebpackPlugin = require('html-webpack-plugin')        //(esto va al principio)

  //se crea una seccion de plugin despues de modules
  -escribimos siguiente codigo en webpack.config.js:

      plugins: [
        new HtmlWebpackPlugin({ // CONFIGURACIÓN DEL PLUGIN
            inject: true, // INYECTA EL BUNDLE AL TEMPLATE HTML
            template: './public/index.html', // LA RUTA AL TEMPLATE HTML
            filename: './index.html' // NOMBRE FINAL DEL ARCHIVO
        })
    ]

-ejecutamos npm run build o npm run dev segun el modo en el que estemos 

-recordemos que se identifique el cambio en la optimizacion, ademas,
-html se usa con webpack para que esta misma genere un archivo html optimizado en nuestra produccion



----------------------------------------------------------------------------------------------------

CSS con webpack

 -npm i mini-css-extract-plugin css-loader -D

-en el archivo webpack.config.js  
  -añadimos: const MiniCssExtractplugin = require('mini-css-extract-plugin'); //al comienzo
  -creamos una nueva regla: 
          {
            test: /\.css|.styl$/i,
            use:[MiniCssExtractplugin.loader, 
            'css-loader',
            'stylus-loader'
            ],
          }
  -añadimos el plugin:
    - new MiniCssExtractplugin(),

-npm run dev //(notese que se crea el archivo .css en dist)
 //css y webpack con stylus(preprocesador)
npm install stylus stylus-loader -D  

----------------------------------------------------------------------------------------------

copy plugin con webpack
se utiliza para mover archivos, imagenes e incluso una carpeta completa de desarrollo a produccion para no complicarnos tanto,
y a su vez optimizar nuestro codigo en produccion

- npm i copy-webpack-plugin -D
-carpeta webpack.config.js:
    const CopyPlugin = require('copy-webpack-plugin');

    new CopyPlugin({
            patterns: [
              {
                from: path.resolve(__dirname, "src", "assets/images"),
                to: "assets/images"
              }
            ]
          }),

-se organiza la carpeta que se va a mover , en este caso es assets/images
-ejecutamos npm run dev
-verificamos la terminal que se vea que si movio o copio dicha carpeta y que este ok(verde)
-verificamos que veamos la carpeta assets/images en dist

Es importante las propiedades from y to
From ⇒ que recurso (archivo o directorio) deseamos copiar al directorio final
To ⇒ en que ruta dentro de la carpeta final terminara los recursos
--------------------------------------------------------------------------------------------------

loader de imagenes
se usa para optimizar nuestras imagenes en la aplicacion

-archivo webpack.config.js, nueva regla para las imagenes:
            {
            test: /\.png/,
            type: 'asset/resource'
          }
-se crean las constantes que van a tener el path de nuestras imagenes
-modificamos en el body o template la parte que vamos a cambiar, es decir lo que es una ruta o path por las constantes creadas
para que sea mas amigable de entender

-ejecutamos npm run dev
-luego en la carpeta dist notamos unas imagenes con unos nombres muy raros pero cuyas imagenes estan optimizadas


-------------------------------------------------------------------------------------------------------------
fuentes loaders

@font-face  arreglado de las fuentes que se van a optimizar

npm install url-loader file-loader -D

configuracion de la regla nueva en el archivo webpack.config.js


----------------------------------------------------------------------
optimizacion: haches, compresion y minificacion de archivos

- npm install css-minimizer-webpack-plugin terser-webpack-plugin -D

¿Por qué es importante usar Hashes en nuestros archivos?
Los recursos que se guardan en memoria cache suceden cuando el navegador entra a un sitio por primera vez detecta los recursos y los guarda. Por ello la siguiente vez sera mucho más rápido porque estarán en memoria
La desventaja esta cuando sacamos una nueva versión, porque tendrán un mismo nombre evitando que se descargue los nuevos cambios, por lo tanto, el usuario no recibirá los nuevos cambios
Para que no haya conflictos con la cache una vez que tengamos nuestro proyecto en producción es importante darles un hash para cada nueva versión

-const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');
-const TerserPlugin = require('terser-webpack-plugin');
-fijarse en: [name].[contenthash], estos son hasher , los encargados de optimizar aun mas nuestro codigo
-archivo webpack.config.js:
  añadimos una nueva parte llamada optimizacion:
          optimization:{
        minimize: true,
        minimizer:[
          new CssMinimizerPlugin(),
          new TerserPlugin(),
        ]
      }

Debes utilizar los siguientes paquetes
css-minimizer-webpack-plugin ⇒ Nos ayuda a comprimir nuestros archivos finales CSS
terser-webpack-plugin ⇒ Permite minificar de una mejor forma

Cuando nombremos en la configuración de webpack es importante usar [contenthash] para evitar problemas con la cache, 
lo anterior se debe a cuando actualicemos nuestra app por una nueva version ,sino cambiamos el nombre con los hashes el usuario
no vera el cambio o no sentira el cambio en la aplicacion

-------------------------------------------------------------------------------------------------------------------------
Webpack Alias
<h4>Apuntes</h4>
Alias ⇒ nos permiten otorgar nombres paths específicos evitando los paths largos
Para crear un alias debes agregar la siguiente configuración a webpack
module.exports = {
	...
	resolve: {
		...
    alias: {
      '@nombreDeAlias': path.resolve(__dirname, 'src/<directorio>'),
    },
	}
}
Puedes usarlo en los imports de la siguiente manera
import modulo from "@ejemplo/archivo.js";

-------------------------------------------------------------------------------------

variables de entorno

es importante considerar las variables de entorno va a ser un espacio seguro donde podemos guardar datos sensibles
Por ejemplo, subir llaves al repositorio no es buena idea cuando tienes un proyecto open source
Para instalar debemos correr el comando

npm install -D dotenv-webpack

Posteriormente debemos crear un archivo .env donde estarán la clave para acceder a la misma y el valor que contendrán

# Ejemplo
API=https://randomuser.me/api/
Es buena idea tener un archivo de ejemplo donde, el mismo si se pueda subir al repositorio como muestra de que campos van a ir
Una vez creado el archivo .env debemos agregar la siguiente configuración en webpack.config.js

...
const Dotenv = require('dotenv-webpack');
module.exports = {
	...
	plugins: [
		new Dotenv()
  ],
}
dotenv-webpack ⇒ Leera el archivo .env por defecto y lo agregar a nuestro proyecto
Para usarlas debes hacer lo siguiente
const nombre = process.env.NOMBRE_VARIABLE;
Toda la configuración se podrá acceder desde process.env

en este caso process.env.API se esta usando en la carpeta util en el archivo getdata, el cual accede a la variable de entorno 
llamada API que almacena el api que se esta usando en la aplicacion